{
  "address": "0x565f3657793E2dcA896Befa4cADcF003b48Af1FB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_votingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "NewCandidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "numVotes",
          "type": "uint256"
        }
      ],
      "name": "VoteEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidatesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numVotes",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1448ca1d7ea8acd3a87379e8fd4a08f50cf8ca819042a1d1a5a895663220646",
  "receipt": {
    "to": null,
    "from": "0x560215A59247d47Bd949786DE7A7561bcc1E43ED",
    "contractAddress": "0x565f3657793E2dcA896Befa4cADcF003b48Af1FB",
    "transactionIndex": 0,
    "gasUsed": "580965",
    "logsBloom": "0x
    "blockHash": "0x5ce1fbab0e762244698b67fdd211f9207b05939c8cf387408515f2bfdcc5b9d8",
    "transactionHash": "0xa1448ca1d7ea8acd3a87379e8fd4a08f50cf8ca819042a1d1a5a895663220646",
    "logs": [],
    "blockNumber": 7811108,
    "cumulativeGasUsed": "580965",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa7ce17276033944B2B41A3D5837B0475cD153069"
  ],
  "numDeployments": 1,
  "solcInputHash": "2f4ceeb03a13077050898ad1e82983b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"NewCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numVotes\",\"type\":\"uint256\"}],\"name\":\"VoteEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numVotes\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/VotingSystem/VotingSystem.sol\":\"VotingSystem\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"src/VotingSystem/VotingSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// import IERC20 below\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract VotingSystem {\\n    address public owner;\\n    mapping(uint256 => Candidate) public candidates;\\n    mapping(address => uint256) public votes;\\n    uint256 public candidatesCount;\\n\\taddress public votingToken;\\n\\t\\n\\n    struct Candidate {\\n        uint id;\\n        string name;\\n        uint voteCount;\\n    }\\n\\n    event VoteEvent (\\n        uint indexed _candidateId,\\n\\t\\tuint indexed numVotes\\n    );\\n\\n    event NewCandidate (\\n        uint indexed _candidateId,\\n        string _name\\n    );\\n\\n    constructor(address _votingToken) {\\n        owner = msg.sender;\\n\\t\\tvotingToken = _votingToken;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function addCandidate(string memory _name) public onlyOwner {\\n        candidatesCount++;\\n        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);\\n        emit NewCandidate(candidatesCount, _name);\\n    }\\n\\n    function vote(uint256 _candidateId, uint256 numVotes) public {\\n        require(numVotes > 0, \\\"Vote must be a positive integer.\\\");\\n        // Require that the voter has enough voting power\\n\\t\\tuint256 votingPower = IERC20(votingToken).balanceOf(msg.sender);\\n        require(votes[msg.sender] + numVotes <= votingPower, \\\"Insufficient voting power.\\\");\\n\\n        // Require a valid candidate\\n        require(_candidateId > 0 && _candidateId <= candidatesCount, \\\"Not a valid candidate.\\\");\\n\\n        // Record the voter has voted\\n        votes[msg.sender] += numVotes;\\n\\n        // Update candidate's vote count\\n        candidates[_candidateId].voteCount += numVotes;\\n\\n        // Trigger voted event\\n        emit VoteEvent(_candidateId, numVotes);\\n    }\\n}\\n\",\"keccak256\":\"0x704e0aa8a9b63629730834cd5f35947a095836e6065d73464c3e90a48603ae21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161095738038061095783398101604081905261002f91610062565b60008054336001600160a01b031991821617909155600480549091166001600160a01b0392909216919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b6108b6806100a16000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d5578063b03401231461011a578063b384abef1461013a578063d8bff5a51461014d57600080fd5b80632d35a8a2146100825780633477ee2e1461009e578063462e91ec146100c0575b600080fd5b61008b60035481565b6040519081526020015b60405180910390f35b6100b16100ac366004610514565b61016d565b60405161009593929190610573565b6100d36100ce3660046105b2565b610217565b005b6000546100f59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610095565b6004546100f59073ffffffffffffffffffffffffffffffffffffffff1681565b6100d3610148366004610663565b6102df565b61008b61015b366004610685565b60026020526000908152604090205481565b60016020819052600091825260409091208054918101805461018e906106c2565b80601f01602080910402602001604051908101604052809291908181526020018280546101ba906106c2565b80156102075780601f106101dc57610100808354040283529160200191610207565b820191906000526020600020905b8154815290600101906020018083116101ea57829003601f168201915b5050505050908060020154905083565b60005473ffffffffffffffffffffffffffffffffffffffff16331461023b57600080fd5b6003805490600061024b83610712565b909155505060408051606081018252600354808252602080830185815260008486018190529283526001918290529390912082518155925191929190820190610294908261077b565b50604082015181600201559050506003547f01c6feb6a218293c8f849426e09abdca9d0d75e57e2255b6a7942add2bb3cb90826040516102d4919061083b565b60405180910390a250565b600081116103345760405162461bcd60e51b815260206004820181905260248201527f566f7465206d757374206265206120706f73697469766520696e74656765722e60448201526064015b60405180910390fd5b600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152339281019290925260009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc919061084e565b3360009081526002602052604090205490915081906103ec908490610867565b111561043a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420766f74696e6720706f7765722e000000000000604482015260640161032b565b60008311801561044c57506003548311155b6104985760405162461bcd60e51b815260206004820152601660248201527f4e6f7420612076616c69642063616e6469646174652e00000000000000000000604482015260640161032b565b33600090815260026020526040812080548492906104b7908490610867565b9091555050600083815260016020526040812060020180548492906104dd908490610867565b9091555050604051829084907fd193833848b675d858c4a3354369c7ff9a3cf48d9f9fbbf0882944b88ff6859190600090a3505050565b60006020828403121561052657600080fd5b5035919050565b6000815180845260005b8181101561055357602081850181015186830182015201610537565b506000602082860101526020601f19601f83011685010191505092915050565b83815260606020820152600061058c606083018561052d565b9050826040830152949350505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156105c457600080fd5b813567ffffffffffffffff808211156105dc57600080fd5b818401915084601f8301126105f057600080fd5b8135818111156106025761060261059c565b604051601f8201601f19908116603f0116810190838211818310171561062a5761062a61059c565b8160405282815287602084870101111561064357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806040838503121561067657600080fd5b50508035926020909101359150565b60006020828403121561069757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106bb57600080fd5b9392505050565b600181811c908216806106d657607f821691505b6020821081036106f657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198203610725576107256106fc565b5060010190565b601f82111561077657600081815260208120601f850160051c810160208610156107535750805b601f850160051c820191505b818110156107725782815560010161075f565b5050505b505050565b815167ffffffffffffffff8111156107955761079561059c565b6107a9816107a384546106c2565b8461072c565b602080601f8311600181146107de57600084156107c65750858301515b600019600386901b1c1916600185901b178555610772565b600085815260208120601f198616915b8281101561080d578886015182559484019460019091019084016107ee565b508582101561082b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260006106bb602083018461052d565b60006020828403121561086057600080fd5b5051919050565b8082018082111561087a5761087a6106fc565b9291505056fea2646970667358221220b8d3ebc82a1b40022fe83196d8b70195d38b8df5bb9f5809778b3085fa5e788164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d5578063b03401231461011a578063b384abef1461013a578063d8bff5a51461014d57600080fd5b80632d35a8a2146100825780633477ee2e1461009e578063462e91ec146100c0575b600080fd5b61008b60035481565b6040519081526020015b60405180910390f35b6100b16100ac366004610514565b61016d565b60405161009593929190610573565b6100d36100ce3660046105b2565b610217565b005b6000546100f59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610095565b6004546100f59073ffffffffffffffffffffffffffffffffffffffff1681565b6100d3610148366004610663565b6102df565b61008b61015b366004610685565b60026020526000908152604090205481565b60016020819052600091825260409091208054918101805461018e906106c2565b80601f01602080910402602001604051908101604052809291908181526020018280546101ba906106c2565b80156102075780601f106101dc57610100808354040283529160200191610207565b820191906000526020600020905b8154815290600101906020018083116101ea57829003601f168201915b5050505050908060020154905083565b60005473ffffffffffffffffffffffffffffffffffffffff16331461023b57600080fd5b6003805490600061024b83610712565b909155505060408051606081018252600354808252602080830185815260008486018190529283526001918290529390912082518155925191929190820190610294908261077b565b50604082015181600201559050506003547f01c6feb6a218293c8f849426e09abdca9d0d75e57e2255b6a7942add2bb3cb90826040516102d4919061083b565b60405180910390a250565b600081116103345760405162461bcd60e51b815260206004820181905260248201527f566f7465206d757374206265206120706f73697469766520696e74656765722e60448201526064015b60405180910390fd5b600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152339281019290925260009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc919061084e565b3360009081526002602052604090205490915081906103ec908490610867565b111561043a5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420766f74696e6720706f7765722e000000000000604482015260640161032b565b60008311801561044c57506003548311155b6104985760405162461bcd60e51b815260206004820152601660248201527f4e6f7420612076616c69642063616e6469646174652e00000000000000000000604482015260640161032b565b33600090815260026020526040812080548492906104b7908490610867565b9091555050600083815260016020526040812060020180548492906104dd908490610867565b9091555050604051829084907fd193833848b675d858c4a3354369c7ff9a3cf48d9f9fbbf0882944b88ff6859190600090a3505050565b60006020828403121561052657600080fd5b5035919050565b6000815180845260005b8181101561055357602081850181015186830182015201610537565b506000602082860101526020601f19601f83011685010191505092915050565b83815260606020820152600061058c606083018561052d565b9050826040830152949350505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156105c457600080fd5b813567ffffffffffffffff808211156105dc57600080fd5b818401915084601f8301126105f057600080fd5b8135818111156106025761060261059c565b604051601f8201601f19908116603f0116810190838211818310171561062a5761062a61059c565b8160405282815287602084870101111561064357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806040838503121561067657600080fd5b50508035926020909101359150565b60006020828403121561069757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106bb57600080fd5b9392505050565b600181811c908216806106d657607f821691505b6020821081036106f657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198203610725576107256106fc565b5060010190565b601f82111561077657600081815260208120601f850160051c810160208610156107535750805b601f850160051c820191505b818110156107725782815560010161075f565b5050505b505050565b815167ffffffffffffffff8111156107955761079561059c565b6107a9816107a384546106c2565b8461072c565b602080601f8311600181146107de57600084156107c65750858301515b600019600386901b1c1916600185901b178555610772565b600085815260208120601f198616915b8281101561080d578886015182559484019460019091019084016107ee565b508582101561082b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260006106bb602083018461052d565b60006020828403121561086057600080fd5b5051919050565b8082018082111561087a5761087a6106fc565b9291505056fea2646970667358221220b8d3ebc82a1b40022fe83196d8b70195d38b8df5bb9f5809778b3085fa5e788164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 871,
        "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 876,
        "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
        "label": "candidates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Candidate)891_storage)"
      },
      {
        "astId": 880,
        "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
        "label": "votes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 882,
        "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
        "label": "candidatesCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 884,
        "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
        "label": "votingToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Candidate)891_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VotingSystem.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)891_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)891_storage": {
        "encoding": "inplace",
        "label": "struct VotingSystem.Candidate",
        "members": [
          {
            "astId": 886,
            "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 888,
            "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 890,
            "contract": "src/VotingSystem/VotingSystem.sol:VotingSystem",
            "label": "voteCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}